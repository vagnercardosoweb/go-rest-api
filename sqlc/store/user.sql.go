// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package store

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const CreateUser = `-- name: CreateUser :exec
INSERT INTO
    users (name, email, birth_date, code_to_invite, password_hash, token_to_confirm_email, confirmed_email_at,
           login_blocked_until, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type CreateUserParams struct {
	Name                string       `db:"name" json:"name"`
	Email               string       `db:"email" json:"email"`
	BirthDate           time.Time    `db:"birth_date" json:"birth_date"`
	CodeToInvite        string       `db:"code_to_invite" json:"code_to_invite"`
	PasswordHash        string       `db:"password_hash" json:"password_hash"`
	TokenToConfirmEmail uuid.UUID    `db:"token_to_confirm_email" json:"token_to_confirm_email"`
	ConfirmedEmailAt    sql.NullTime `db:"confirmed_email_at" json:"confirmed_email_at"`
	LoginBlockedUntil   sql.NullTime `db:"login_blocked_until" json:"login_blocked_until"`
	CreatedAt           time.Time    `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, CreateUser,
		arg.Name,
		arg.Email,
		arg.BirthDate,
		arg.CodeToInvite,
		arg.PasswordHash,
		arg.TokenToConfirmEmail,
		arg.ConfirmedEmailAt,
		arg.LoginBlockedUntil,
		arg.CreatedAt,
	)
	return err
}

const GetUserByEmailInLogin = `-- name: GetUserByEmailInLogin :one
SELECT
    id,
    name,
    email,
    password_hash
FROM users
WHERE LOWER(email) = LOWER($1)
LIMIT 1
`

type GetUserByEmailInLoginRow struct {
	ID           uuid.UUID `db:"id" json:"id"`
	Name         string    `db:"name" json:"name"`
	Email        string    `db:"email" json:"email"`
	PasswordHash string    `db:"password_hash" json:"password_hash"`
}

func (q *Queries) GetUserByEmailInLogin(ctx context.Context, email string) (GetUserByEmailInLoginRow, error) {
	row := q.db.QueryRowContext(ctx, GetUserByEmailInLogin, email)
	var i GetUserByEmailInLoginRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const GetUsers = `-- name: GetUsers :many
SELECT
    id,
    name,
    email,
    birth_date,
    code_to_invite,
    token_to_confirm_email,
    confirmed_email_at,
    login_blocked_until
FROM users
LIMIT $1
`

type GetUsersRow struct {
	ID                  uuid.UUID    `db:"id" json:"id"`
	Name                string       `db:"name" json:"name"`
	Email               string       `db:"email" json:"email"`
	BirthDate           time.Time    `db:"birth_date" json:"birth_date"`
	CodeToInvite        string       `db:"code_to_invite" json:"code_to_invite"`
	TokenToConfirmEmail uuid.UUID    `db:"token_to_confirm_email" json:"token_to_confirm_email"`
	ConfirmedEmailAt    sql.NullTime `db:"confirmed_email_at" json:"confirmed_email_at"`
	LoginBlockedUntil   sql.NullTime `db:"login_blocked_until" json:"login_blocked_until"`
}

func (q *Queries) GetUsers(ctx context.Context, limit int32) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, GetUsers, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersRow{}
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.BirthDate,
			&i.CodeToInvite,
			&i.TokenToConfirmEmail,
			&i.ConfirmedEmailAt,
			&i.LoginBlockedUntil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
