// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: wallet.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const GetWalletById = `-- name: GetWalletById :one
SELECT
    id,
    name,
    sort_order,
    user_id
FROM wallets
WHERE id = $1
LIMIT 1
`

type GetWalletByIdRow struct {
	ID        uuid.UUID `db:"id" json:"id"`
	Name      string    `db:"name" json:"name"`
	SortOrder int16     `db:"sort_order" json:"sort_order"`
	UserID    uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) GetWalletById(ctx context.Context, id uuid.UUID) (*GetWalletByIdRow, error) {
	row := q.db.QueryRowContext(ctx, GetWalletById, id)
	var i GetWalletByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SortOrder,
		&i.UserID,
	)
	return &i, err
}

const GetWallets = `-- name: GetWallets :many
SELECT
    wallets.id,
    wallets.name,
    wallets.sort_order,
    users.id AS "user_id",
    users.name AS "user_name"
FROM
    wallets
        INNER JOIN users ON wallets.user_id = users.id
LIMIT $1
`

type GetWalletsRow struct {
	ID        uuid.UUID `db:"id" json:"id"`
	Name      string    `db:"name" json:"name"`
	SortOrder int16     `db:"sort_order" json:"sort_order"`
	UserID    uuid.UUID `db:"user_id" json:"user_id"`
	UserName  string    `db:"user_name" json:"user_name"`
}

func (q *Queries) GetWallets(ctx context.Context, limit int32) ([]*GetWalletsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetWallets, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetWalletsRow{}
	for rows.Next() {
		var i GetWalletsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SortOrder,
			&i.UserID,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
